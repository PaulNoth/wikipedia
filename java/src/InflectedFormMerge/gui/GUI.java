package gui;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import testAndTools.SortHashMap;
import mergingInflectedFormNE.FileReader;
import mergingInflectedFormNE.FileWriter;
import mergingInflectedFormNE.Forms;
import mergingInflectedFormNE.InflectedForm;
import mergingInflectedFormNE.LinkAnchor;
import mergingInflectedFormNE.Main;
import mergingInflectedFormNE.NamedEntity;
import mergingInflectedFormNE.NamedEntityCreator;
import mergingInflectedFormNE.RootChange;
import mergingInflectedFormNE.Suffix;

// TODO: Auto-generated Javadoc
/**
 * The Class GUI.
 *
 * @author Michal
 */
public class GUI extends javax.swing.JFrame {

	/** The hm suf gui. */
	public HashMap<String,Suffix> hmSufGUI = null;
	
	/** The hm root change gui. */
	public HashMap<String,RootChange> hmRootChangeGUI = null;
	
	/** The hm named entity gui. */
	public HashMap<String, NamedEntity> hmNamedEntityGUI = null;
	
	/** The hm link anchor gui. */
	public HashMap<String, LinkAnchor> hmLinkAnchorGUI = null;
	
    /**
     * Creates new form GUI.
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jRadioButton3 = new javax.swing.JRadioButton();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Load links from XML");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jRadioButton1.setSelected(true);
        jRadioButton1.setText("sample");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setText("wiki");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });
        
        jButton2.setText("Create Named Entity");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Load suffixes and root changes");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Save links to TXT");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Load links from TXT");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Save Named Entity");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Load Named Entity from TXT");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Save suff and root changes");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Load suff and root changes from TXT");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setVisible(false);
        jButton10.setText("Merge Inflected forms");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jRadioButton3.setSelected(true);
        jRadioButton3.setText("output");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel1.setText("suffix");

        jLabel2.setText("root change");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox2, 0, 130, Short.MAX_VALUE)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGap(52, 52, 52))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton10)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jRadioButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton10))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton6)
                            .addComponent(jButton7)
                            .addComponent(jRadioButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton8)
                            .addComponent(jButton9)
                            .addComponent(jRadioButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * J button1 action performed.
     *
     * @param evt the evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    	jTextArea1.setText("");
    	Main m = new Main();
    	if(jRadioButton1.isSelected()){
    		this.hmLinkAnchorGUI = m.loadLinkAnchorFromXMLsample(false);
    		
    	}
    	else if(jRadioButton2.isSelected()){
    		this.hmLinkAnchorGUI = m.loadLinkAnchorFromXML(false);
    	}
    	
    	if(hmLinkAnchorGUI == null){
    		jTextArea1.append("Error: fail to load Links and Anchors\n");
    	}
    	else{
    		jTextArea1.append("Links were successfully loaded\n\n");
    		if(jRadioButton3.isSelected()){
    			 printHashMapLinkAnchor(hmLinkAnchorGUI);
    		}
    	}
    	
    	// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    /**
     * J radio button1 action performed.
     *
     * @param evt the evt
     */
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
    	jRadioButton2.setSelected(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    /**
     * J radio button2 action performed.
     *
     * @param evt the evt
     */
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
    	jRadioButton1.setSelected(false);
    }//GEN-LAST:event_jRadioButton2ActionPerformed
    
    /**
     * J combo box1 action performed.
     *
     * @param evt the evt
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    	jTextArea1.setText("");
    	if(hmSufGUI != null){
    		this.printSuffixes(hmSufGUI.get(jComboBox1.getSelectedItem()));
    	}    	
    }//GEN-LAST:event_jComboBox1ActionPerformed
      
    /**
     * J button2 action performed.
     *
     * @param evt the evt
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    	jTextArea1.setText("");
    	Main m = new Main();
    	if(hmLinkAnchorGUI == null){
	    	if(jRadioButton1.isSelected()){
	    		this.hmNamedEntityGUI = m.createNamedEntityFromLinkAnchorSample(false);    		
	    	}
	    	else if(jRadioButton2.isSelected()){
	    		this.hmNamedEntityGUI = m.createNamedEntityFromLinkAnchor(false);
	    	}
    	}
    	else{
    		if(jRadioButton1.isSelected()){
	    		this.hmNamedEntityGUI = m.createNamedEntityFromLoadedLinkAnchorSample(hmLinkAnchorGUI, false);    		
	    	}
	    	else if(jRadioButton2.isSelected()){
	    		this.hmNamedEntityGUI = m.createNamedEntityFromLoadedLinkAnchor(hmLinkAnchorGUI,false);
	    	}
    	}
    	if(hmNamedEntityGUI == null){
    		jTextArea1.append("Error: fail to create Named entities\n");
    	}
    	else{
    		jTextArea1.append("Named entities were successfully loaded\n\n");
    		if(jRadioButton3.isSelected()){
    			NamedEntityCreator nec = new NamedEntityCreator();
    			jTextArea1.append(nec.namedEntityHashMapToStringWithNumberOfOccurences(hmNamedEntityGUI));
    		}
    	}    	
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * J button3 action performed.
     *
     * @param evt the evt
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    	jTextArea1.setText("");
    	Main m = new Main();
    	
    	if(hmNamedEntityGUI == null){
    		jTextArea1.append("Error: fail to extract suffixes and root changes becasue Named Entties were not loaded yet\n");
    	}
    	else{
    		hmSufGUI = new HashMap<String, Suffix>();
    		hmRootChangeGUI = new HashMap<String, RootChange>(); 
    		m.extractSuffixesAndRootChanges(hmNamedEntityGUI, this.hmSufGUI, this.hmRootChangeGUI);        	
    	}
    	
    	if(hmSufGUI == null || hmRootChangeGUI == null){
    		jTextArea1.append("Error: fail to to extract suffixes or root changes\n");
    	}
    	else{
    		jTextArea1.append("Suffixes and root changes were successfully extracted\n\n");
    		if(jRadioButton3.isSelected()){
    			jTextArea1.append("=================================================================\n");
    			jTextArea1.append("Suffixes:\n\n");
    			this.printListOfSuffixes(this.hmSufGUI);
    			jTextArea1.append("\n=================================================================\n");
    			jTextArea1.append("Root changes:\n\n");
    			this.printListOfRootChanges(hmRootChangeGUI);
    			
    			SortHashMap shm = new SortHashMap();
    			hmSufGUI = shm.sortSuffixesByNumberOfOccurrences(hmSufGUI);
    			String[] sSuf = new String[hmSufGUI.size()];
    			int i = 0;
    			for(Map.Entry<String, Suffix> entry : this.hmSufGUI.entrySet()){
    				Suffix suf = entry.getValue();
    				sSuf[i]=suf.getSuffix(); 
    				i++;
    			}
    			
    			hmRootChangeGUI = shm.sortRootChangeByNumberOfOccurrences(hmRootChangeGUI);
    			String[] sRC = new String[hmRootChangeGUI.size()];
    			i = 0;
    			for(Map.Entry<String, RootChange> entry : this.hmRootChangeGUI.entrySet()){
    				RootChange rc = entry.getValue();
    				sRC[i]=rc.getRootBeforeChange()+"_"+rc.getRootChange();
    				i++;
    			}
    			jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(sSuf));
    			jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(sRC));
    		}
    	}
    	
    	//jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 5", "Item 6", "Item 7", "Item 8" }));
    	//jComboBox1.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * J button4 action performed.
     *
     * @param evt the evt
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    	jTextArea1.setText("");
    	FileWriter fw = new FileWriter();
    	Main m = new Main();
    	
    	if(this.hmLinkAnchorGUI == null){
	    	if(jRadioButton1.isSelected()){
	    		m.loadLinkAnchorFromXMLsample(true);
	    		jTextArea1.append("Links were saved to file: \"../data/skwiki_link_anchor_sample.txt\"\n\n");
	    	}
	    	else if(jRadioButton2.isSelected()){
	    		m.loadLinkAnchorFromXML(true);
	    		jTextArea1.append("Links were saved to file: \"../data/skwiki_link_anchor.txt\"\n\n");
	    	}
    	}
    	else{
    		if(jRadioButton1.isSelected()){
    			fw.writeLinksToFile("../data/skwiki_link_anchor_sample.txt", hmLinkAnchorGUI, true);
    			jTextArea1.append("Links were saved to file: \"../data/skwiki_link_anchor_sample.txt\"\n\n");
	    	}
	    	else if(jRadioButton2.isSelected()){
	    		fw.writeLinksToFile("../data/skwiki_link_anchor.txt", hmLinkAnchorGUI, true);
	    		jTextArea1.append("Links were saved to file: \"../data/skwiki_link_anchor.txt\"\n\n");
	    	}
    	}    	
		//if(jRadioButton3.isSelected() && hmLinkAnchorGUI != null){
		//	 printHashMapLinkAnchor(hmLinkAnchorGUI);
		//}    	
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * J button6 action performed.
     *
     * @param evt the evt
     */
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    	jTextArea1.setText("");
    	FileWriter fw = new FileWriter();
    	Main m = new Main();
    	
    	if(this.hmNamedEntityGUI == null){
	    	if(jRadioButton1.isSelected()){
	    		this.hmNamedEntityGUI = m.createNamedEntityFromLinkAnchorSample(true);
	    		jTextArea1.append("Named entity were saved to file: \"../data/sample_test_data_merged_inflected_forms_sample.txt\"\n\n");
	    	}
	    	else if(jRadioButton2.isSelected()){
	    		this.hmNamedEntityGUI = m.createNamedEntityFromLinkAnchor(true);
	    		jTextArea1.append("Named entity were saved to file: ../data/sample_test_data_merged_inflected_forms.txt\n\n");
	    	}
    	}
    	else{
    		if(jRadioButton1.isSelected()){
    			fw.writeNamedEntityToFile("../data/skwiki_merged_inflected_forms_sample.txt", hmNamedEntityGUI);
    			jTextArea1.append("Named entity were saved to file: \"../data/skwiki_merged_inflected_forms_sample.txt\"\n\n");
	    	}
	    	else if(jRadioButton2.isSelected()){
	    		fw.writeNamedEntityToFile("../data/skwiki_merged_inflected_forms.txt", hmNamedEntityGUI);
	    		jTextArea1.append("Named entity were saved to file: \"../data/skwiki_merged_inflected_forms.txt\"\n\n");
	    	}
    	}
    	
    	// TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * J button8 action performed.
     *
     * @param evt the evt
     */
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
    	jTextArea1.setText("");
    	FileWriter fw = new FileWriter();
    	Main m = new Main();
    	
    	if(this.hmSufGUI != null){
	    	if(jRadioButton1.isSelected()){
	    		fw.writeSuffixesToFile("../data/../data/skwiki_suffixes_sample.txt", this.hmSufGUI, true);    		
	    		jTextArea1.append("Suffixes were saved to file: \"../data/skwiki_suffixes_sample.txt\"\n\n");
	    	}
	    	else if(jRadioButton2.isSelected()){
	    		fw.writeSuffixesToFile("../data/../data/skwiki_suffixes.txt", this.hmSufGUI, true);    		
	    		jTextArea1.append("Suffixes were saved to file: \"../data/skwiki_suffixes.txt\"\n\n");
	    	}
    	}
    	else{
    		jTextArea1.append("Error: suffixes were not loaded yet\n\n");
    	}
    	if(this.hmRootChangeGUI != null){
    		if(jRadioButton1.isSelected()){
    			fw.writeRootChangeToFile("../data/skwiki_rootChanges_sample.txt", hmRootChangeGUI, true);
    			jTextArea1.append("Root changes were saved to file: \"../data/skwiki_rootChanges_sample.txt\"\n\n");
	    	}
	    	else if(jRadioButton2.isSelected()){
	    		fw.writeRootChangeToFile("../data/skwiki_rootChanges.txt", hmRootChangeGUI, true);
    			jTextArea1.append("Root changes were saved to file: \"../data/skwiki_rootChanges.txt\"\n\n");
	    	}
    	}
    	else{
    		jTextArea1.append("Error: root changes were not loaded yet\n\n");
    	}
    	
    	
    	// TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * J button5 action performed.
     *
     * @param evt the evt
     */
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    	jTextArea1.setText("");
    	FileReader fr = new FileReader();
    	if(jRadioButton1.isSelected()){
    		this.hmLinkAnchorGUI = fr.readLinkAnchorFromFile("../data/skwiki_link_anchor_sample.txt");
    		jTextArea1.append("Links were loaded from file: \"../data/skwiki_link_anchor_sample.txt\"\n\n");
    	}
    	else if(jRadioButton2.isSelected()){
    		this.hmLinkAnchorGUI = fr.readLinkAnchorFromFile("../data/skwiki_link_anchor.txt");
    		jTextArea1.append("Links were loaded from file: \"../data/skwiki_link_anchor.txt\"\n\n");
    	}
    	
    	if(hmLinkAnchorGUI == null){
    		jTextArea1.append("Error: fail to load Links from TXT\n\n");
    	}
    	else if(jRadioButton3.isSelected() && hmLinkAnchorGUI != null){
    		 printHashMapLinkAnchor(hmLinkAnchorGUI);
    	}      	
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * J button7 action performed.
     *
     * @param evt the evt
     */
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
    	jTextArea1.setText("");
    	FileReader fr = new FileReader();
    	if(jRadioButton1.isSelected()){
    		this.hmNamedEntityGUI = fr.readNamedEntity("../data/skwiki_merged_inflected_forms_sample.txt");
    		jTextArea1.append("Named Entities were loaded from file: \"../data/skwiki_merged_inflected_forms_sample.txt\"\n\n");
    	}
    	else if(jRadioButton2.isSelected()){
    		this.hmNamedEntityGUI = fr.readNamedEntity("../data/skwiki_merged_inflected_forms.txt");
    		jTextArea1.append("Named Entities were loaded from file: \"../data/skwiki_merged_inflected_forms.txt\"\n\n");
    	}
    	
    	if(hmNamedEntityGUI == null){
    		jTextArea1.append("Error: fail to load Named Entities from TXT\n\n");
    	}
    	else if(jRadioButton3.isSelected() && hmNamedEntityGUI != null){
    		printNamedEntities(hmNamedEntityGUI);
    	}      	
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * J button9 action performed.
     *
     * @param evt the evt
     */
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
    	jTextArea1.setText("");
    	FileReader fr = new FileReader();
    	if(jRadioButton1.isSelected()){
    		this.hmSufGUI = fr.readSuffixFromFile("../data/skwiki_suffixes_sample.txt");
    		jTextArea1.append("Suffixes were loaded from file: \"../data/skwiki_suffixes_sample.txt\"\n");
    		
    		this.hmRootChangeGUI = fr.readRootChangeFromFile("../data/skwiki_rootChanges_sample.txt");
    		jTextArea1.append("Root changes were loaded from file: \"../data/skwiki_rootChanges_sample.txt\"\n\n");
    	}
    	else if(jRadioButton2.isSelected()){
    		this.hmSufGUI = fr.readSuffixFromFile("../data/skwiki_suffixes.txt");
    		jTextArea1.append("Suffixes and Root changes were loaded from file: \"../data/skwiki_suffixes.txt\"\n");
    		
    		this.hmRootChangeGUI = fr.readRootChangeFromFile("../data/skwiki_rootChanges.txt");
    		jTextArea1.append("Root changes were loaded from file: \"../data/skwiki_rootChanges.txt\"\n\n");
    	}
    	
    	if(this.hmRootChangeGUI == null || this.hmSufGUI == null){
    		jTextArea1.append("Error: fail to load Suffixes and Root changes from TXT\n\n");
    	}
    	else if(jRadioButton3.isSelected() && this.hmRootChangeGUI != null && this.hmSufGUI != null){
    		jTextArea1.append("=================================================================\n");
			jTextArea1.append("Suffixes:\n\n");
			this.printListOfSuffixes(this.hmSufGUI);
			jTextArea1.append("\n=================================================================\n");
			jTextArea1.append("Root changes:\n\n");
			this.printListOfRootChanges(hmRootChangeGUI);
    	}
    	if(this.hmRootChangeGUI != null && this.hmSufGUI != null){
    		SortHashMap shm = new SortHashMap();
			hmSufGUI = shm.sortSuffixesByNumberOfOccurrences(hmSufGUI);
			String[] sSuf = new String[hmSufGUI.size()];
			int i = 0;
			for(Map.Entry<String, Suffix> entry : this.hmSufGUI.entrySet()){
				Suffix suf = entry.getValue();
				sSuf[i]=suf.getSuffix(); 
				i++;
			}
			
			hmRootChangeGUI = shm.sortRootChangeByNumberOfOccurrences(hmRootChangeGUI);
			String[] sRC = new String[hmRootChangeGUI.size()];
			i = 0;
			for(Map.Entry<String, RootChange> entry : this.hmRootChangeGUI.entrySet()){
				RootChange rc = entry.getValue();
				sRC[i]=rc.getRootBeforeChange()+"_"+rc.getRootChange();
				i++;
			}
    		
    		jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(sSuf));
			jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(sRC));
    	}
    	
    	
    }//GEN-LAST:event_jButton9ActionPerformed

    /**
     * J combo box2 action performed.
     *
     * @param evt the evt
     */
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
    	jTextArea1.setText("");
    	if(this.hmRootChangeGUI != null){
    		//jTextArea1.append((String) jComboBox2.getSelectedItem()+"\n\n\n");
    		//for(Map.Entry<String, RootChange> e : hmRootChangeGUI.entrySet()){
    		//	RootChange rc = e.getValue();
    		//	String k = e.getKey();
    		//	jTextArea1.append(k+"\n");
    		//}
    		//jTextArea1.append(hmRootChangeGUI.get("ra_er").getRootBeforeChange());
    		this.printRootChanges(hmRootChangeGUI.get(jComboBox2.getSelectedItem()));
    	}    
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * The main method.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /** The j button1. */
    private javax.swing.JButton jButton1;
    
    /** The j button10. */
    private javax.swing.JButton jButton10;
    
    /** The j button2. */
    private javax.swing.JButton jButton2;
    
    /** The j button3. */
    private javax.swing.JButton jButton3;
    
    /** The j button4. */
    private javax.swing.JButton jButton4;
    
    /** The j button5. */
    private javax.swing.JButton jButton5;
    
    /** The j button6. */
    private javax.swing.JButton jButton6;
    
    /** The j button7. */
    private javax.swing.JButton jButton7;
    
    /** The j button8. */
    private javax.swing.JButton jButton8;
    
    /** The j button9. */
    private javax.swing.JButton jButton9;
    
    /** The j combo box1. */
    private javax.swing.JComboBox jComboBox1;
    
    /** The j combo box2. */
    private javax.swing.JComboBox jComboBox2;
    
    /** The j label1. */
    private javax.swing.JLabel jLabel1;
    
    /** The j label2. */
    private javax.swing.JLabel jLabel2;
    
    /** The j radio button1. */
    private javax.swing.JRadioButton jRadioButton1;
    
    /** The j radio button2. */
    private javax.swing.JRadioButton jRadioButton2;
    
    /** The j radio button3. */
    private javax.swing.JRadioButton jRadioButton3;
    
    /** The j scroll pane1. */
    private javax.swing.JScrollPane jScrollPane1;
    
    /** The j text area1. */
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Prints the hash map link anchor.
     *
     * @param hmLinkAnchor the hm link anchor
     */
    public void printHashMapLinkAnchor(HashMap<String, LinkAnchor> hmLinkAnchor){
		Iterator<String> keySetIterator = hmLinkAnchor.keySet().iterator();
		int count = 0;
		int totalCount = 0;
		while(keySetIterator.hasNext()){
			String key = keySetIterator.next();
			jTextArea1.append("link: " + hmLinkAnchor.get(key).getLink() + "\nanchor: " + hmLinkAnchor.get(key).getAnchor() + "\noccurance: " + hmLinkAnchor.get(key).getOccurrences()+"\n");
			jTextArea1.append("--------------------------------------------------------------------\n");
			count++;
			totalCount = totalCount + hmLinkAnchor.get(key).getOccurrences();
		}
		jTextArea1.append("==============================================================\nNumber of individual links: "+count+"\nNumber of all links: "+totalCount+"\n");
		jTextArea1.append("==============================================================\n\n");
	}
    
	/**
	 * Prints the list of suffixes.
	 *
	 * @param hmSuf the hm suf
	 */
	public void printListOfSuffixes(HashMap<String, Suffix> hmSuf){
		SortHashMap shm = new SortHashMap();
		hmSuf = shm.sortSuffixesByNumberOfOccurrences(hmSuf);
		for(Map.Entry<String, Suffix> entry : hmSuf.entrySet()){
			Suffix suf = entry.getValue();
			jTextArea1.append(suf.getSuffix() + "		" + suf.getNumberOfOccurrences()+"\n");
		}
	}

	/**
	 * Prints the list of root changes.
	 *
	 * @param hmRootChange the hm root change
	 */
	public void printListOfRootChanges(HashMap<String, RootChange> hmRootChange){
		SortHashMap shm = new SortHashMap();
		hmRootChange = shm.sortRootChangeByNumberOfOccurrences(hmRootChange);
		for(Map.Entry<String, RootChange> entry : hmRootChange.entrySet()){
			RootChange rc = entry.getValue();
			jTextArea1.append(rc.getRootChange() + "		" + rc.getRootBeforeChange() + "		" + rc.getNumberOfOccurrences()+"\n");
		}
	}
	
	/**
	 * Prints the root changes.
	 *
	 * @param rc the rc
	 */
	public void printRootChanges(RootChange rc){
		jTextArea1.append(rc.getRootBeforeChange() + "	" + rc.getRootChange() + "	" + rc.getNumberOfOccurrences()+"\n");
		jTextArea1.append("--------------------------------------------------\n");
		
		SortHashMap sHM = new SortHashMap();
		HashMap<String, Forms> pomForm = rc.getHashMapForms();
		pomForm = sHM.sortFormsNumberOfOccurrences(pomForm);
		
		for(Map.Entry<String, Forms> e : pomForm.entrySet()){
			Forms f = e.getValue();
			jTextArea1.append(f.getForm1() + "	" + f.getForm2() + "	" + f.getOccurrences() + "\n");
		}				
	}
	
	/**
	 * Prints the suffixes.
	 *
	 * @param suf the suf
	 */
	public void printSuffixes(Suffix suf){
		jTextArea1.append(suf.getSuffix() + "	" + suf.getNumberOfOccurrences()+"\n");
		jTextArea1.append("--------------------------------------------------\n");
		
		SortHashMap sHM = new SortHashMap();
		HashMap<String, Forms> pomForm = suf.getStringsWithSuffix();
		pomForm = sHM.sortFormsNumberOfOccurrences(pomForm);
		
		for(Map.Entry<String, Forms> e : pomForm.entrySet()){
			Forms f = e.getValue();
			jTextArea1.append(f.getForm1() + "	" + f.getForm2() + "	" + f.getOccurrences()+"\n");
		}			
	}
	
	/**
	 * Prints the named entities.
	 *
	 * @param hmNamedEntity the hm named entity
	 */
	public void printNamedEntities(HashMap<String, NamedEntity> hmNamedEntity){
		int i = 1;
		for(Map.Entry<String, NamedEntity> entry : hmNamedEntity.entrySet()){
			String key = entry.getKey();
			NamedEntity ne = entry.getValue();
			jTextArea1.append("============================================================\n" + i + "	" + ne.getNE());
			for(InflectedForm infe : ne.getListInflectedForms()){
				jTextArea1.append("\n" + infe.getInflectedForm() + "		" + infe.getOccurrences());
			}
			jTextArea1.append("\n");
			i++;
		}
	}
}

